package eu.kscode.protector.basic.systems.security.exploits;

import eu.kscode.protector.basic.Main;
import eu.kscode.protector.basic.systems.managers.AKickManager;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.event.player.PlayerInteractEvent;


/*
     A00Protector, Plugin which protects your server against crashes and lags.
   Copyright (C) 2018-2019  KSCode.EU, KrafciG

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
    */
public class PlayerBookExploitListener implements Listener {
    @EventHandler(priority = EventPriority.HIGHEST)
    public synchronized void onInteract(PlayerInteractEvent e) {
        if (e.getPlayer() == null) {
            return;
        }
        if (e.getPlayer().getItemInHand().getType() == Material.BOOK_AND_QUILL || e.getPlayer().getItemInHand().getType() == Material.BOOK || e.getPlayer().getItemInHand().getType() == Material.WRITTEN_BOOK) {
            if (e.getItem().getEnchantments().size() > 1) {
                e.setCancelled(true);
                e.getItem().getEnchantments().clear();
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public synchronized void onBookEdit(PlayerEditBookEvent e) {
        if (e.getPlayer() == null) {
            return;
        }
        if (e.getPlayer().getItemInHand().getType() == Material.BOOK_AND_QUILL || e.getPlayer().getItemInHand().getType() == Material.BOOK || e.getPlayer().getItemInHand().getType() == Material.WRITTEN_BOOK) {
            if (e.getNewBookMeta().getEnchants().size() > 1) {
                e.setCancelled(true);
                e.getNewBookMeta().getEnchants().clear();
            }
        }
        if (Main.getConf().getConf().getBoolean("A00Protector.PagesLimiter-Two.enable")) {
            if (e.getNewBookMeta().getPages().size() > Main.getConf().getConf().getInt("A00Protector.PagesLimiter-Two.limit") || e.getPreviousBookMeta().getPages().size() > Main.getConf().getConf().getInt("A00Protector.PagesLimiter-Two.limit")) {
                e.setCancelled(true);
                AKickManager.AKickManager1(e.getPlayer(), "&8&m---(-&r " + Main.getMess().getMess().getString("A00Protector.prefix") + " &8&m-)---\n&8>> &cYour book has too many pages\n&8>> &7Pages limit: &4(" + Main.getConf().getConf().getInt("A00Protector.PagesLimiter.limit") + ")\n&8&m---(-&r " + Main.getMess().getMess().getString("A00Protector.prefix") + " &8&m-)---");
            }
            if (e.getNewBookMeta().getPageCount() > Main.getConf().getConf().getInt("A00Protector.PagesLimiter-Two.limit") || e.getPreviousBookMeta().getPageCount() > Main.getConf().getConf().getInt("A00Protector.PagesLimiter-Two.limit")) {
                e.setCancelled(true);
                AKickManager.AKickManager1(e.getPlayer(), "&8&m---(-&r " + Main.getMess().getMess().getString("A00Protector.prefix") + " &8&m-)---\n&8>> &cYour book has too many pages\n&8>> &7Pages limit: &4(" + Main.getConf().getConf().getInt("A00Protector.PagesLimiter.limit") + ")\n&8&m---(-&r " + Main.getMess().getMess().getString("A00Protector.prefix") + " &8&m-)---");
            }
        }
    }
}
